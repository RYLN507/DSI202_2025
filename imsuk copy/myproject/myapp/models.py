# myapp/models.py
from django.db import models
from django.conf import settings
from django.utils import timezone
from django.dispatch import receiver
from django.db.models.signals import post_save
from django.db.models import Sum
from decimal import Decimal   

User = settings.AUTH_USER_MODEL

from django.db import models
from django.contrib.auth.models import User

class Profile(models.Model):
    user = models.OneToOneField(
        User, on_delete=models.CASCADE, related_name='profile'
    )
    image = models.ImageField(upload_to='profiles/', blank=True, null=True)  # ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ
    default_address = models.CharField("‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", max_length=255, blank=True, default='')

    def __str__(self):
        return f"Profile ‡∏Ç‡∏≠‡∏á {self.user.username}"


@receiver(post_save, sender=settings.AUTH_USER_MODEL)
def create_or_update_user_profile(sender, instance, created, **kwargs):
    if created:
        Profile.objects.create(user=instance)
    else:
        instance.profile.save()

class Address(models.Model):
    user        = models.ForeignKey(User, on_delete=models.CASCADE, related_name='addresses')
    label       = models.CharField("‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà", max_length=100, default='', blank=True)
    full_address = models.TextField("‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà", default='')
    subdistrict = models.CharField("‡∏ï‡∏≥‡∏ö‡∏•", max_length=100, blank=True)
    district    = models.CharField("‡∏≠‡∏≥‡πÄ‡∏†‡∏≠", max_length=100, blank=True)
    province    = models.CharField("‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î", max_length=100, blank=True)
    zipcode     = models.CharField("‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå", max_length=10, blank=True)
    is_default  = models.BooleanField("‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô", default=False)
    order       = models.PositiveIntegerField(default=0)

    def __str__(self):
        return f"{self.user.username} ‚Äî {self.label or self.full_address[:30]}"

    @property
    def display_address(self):
        """‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"""
        return f"{self.full_address}, {self.subdistrict}, {self.district}, {self.province} {self.zipcode}".strip(', ')


class PaymentMethod(models.Model):
    user    = models.ForeignKey(User, on_delete=models.CASCADE, related_name='payment_methods')
    name    = models.CharField("‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ï‡∏£/‡∏ö‡∏±‡∏ç‡∏ä‡∏µ", max_length=50)
    details = models.CharField("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", max_length=255)

    def __str__(self):
        return f"{self.user.username} ‚Äî {self.name}"

class Category(models.Model):
    name         = models.SlugField("‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î", max_length=50, unique=True)
    display_name = models.CharField("‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î", max_length=100)
    image        = models.ImageField("‡∏£‡∏π‡∏õ‡∏´‡∏°‡∏ß‡∏î", upload_to='categories/', blank=True, null=True)
    class Meta:
        verbose_name        = "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏≠‡∏≤‡∏´‡∏≤‡∏£"
        verbose_name_plural = "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏≠‡∏≤‡∏´‡∏≤‡∏£"

    def __str__(self):
        return self.display_name

class Restaurant(models.Model):
    name           = models.CharField("‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô", max_length=100)
    category       = models.ForeignKey(
        Category,
        on_delete=models.PROTECT,      # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å SET_NULL ‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô PROTECT (‡∏´‡∏£‡∏∑‡∏≠ CASCADE ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
        related_name='restaurants',
        verbose_name="‡∏´‡∏°‡∏ß‡∏î‡∏£‡πâ‡∏≤‡∏ô"
    )
    image          = models.ImageField("‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏£‡πâ‡∏≤‡∏ô", upload_to='restaurants/', blank=True)
    description    = models.TextField("‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢", blank=True)

    address        = models.CharField("‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà", max_length=255, blank=True)
    phone          = models.CharField("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£", max_length=50, blank=True)
    email          = models.EmailField("‡∏≠‡∏µ‡πÄ‡∏°‡∏•", blank=True)
    website        = models.URLField("‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå", blank=True)
    instagram      = models.CharField("Instagram", max_length=100, blank=True)
    line_id        = models.CharField("LINE ID", max_length=100, blank=True)

    opening_hours  = models.CharField("‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‚Äì‡∏õ‡∏¥‡∏î", max_length=100, blank=True)
    price_range    = models.CharField("‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤", max_length=50, blank=True)
    rating_avg     = models.DecimalField("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", max_digits=3, decimal_places=1, null=True, blank=True)

    favorites      = models.ManyToManyField(
        User, blank=True, related_name='favorite_restaurants',
        verbose_name="‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏ô‡∏ä‡∏≠‡∏ö"
    )

    def __str__(self):
        return self.name



class Menu(models.Model):
    restaurant      = models.ForeignKey(
        'Restaurant',
        on_delete=models.CASCADE,
        related_name='menus',
        verbose_name='‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£'
    )
    title           = models.CharField("‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π", max_length=100)
    image           = models.ImageField("‡∏£‡∏π‡∏õ‡πÄ‡∏°‡∏ô‡∏π", upload_to='menus/', blank=True)
    description     = models.TextField("‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏±‡πâ‡∏ô", blank=True)
    details         = models.TextField("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°", blank=True)
    price           = models.DecimalField("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥", max_digits=8, decimal_places=2)
    discount_price  = models.DecimalField(
    "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏•‡∏î", max_digits=8, decimal_places=2,
    default=0.0,
    help_text="‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏•‡∏î ‡∏Å‡πá‡πÉ‡∏™‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥"
    
    )
    start_time      = models.TimeField(
        "‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏≤‡∏¢", default=timezone.now,
        help_text="‡πÄ‡∏ä‡πà‡∏ô 10:00:00"
    )
    end_time        = models.TimeField(
        "‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏¥‡∏î‡∏Ç‡∏≤‡∏¢", default=timezone.now,
        help_text="‡πÄ‡∏ä‡πà‡∏ô 22:00:00"
    )
    favorites       = models.ManyToManyField(
        settings.AUTH_USER_MODEL,
        blank=True,
        related_name='favorite_menus',
        verbose_name="‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏ô‡∏ä‡∏≠‡∏ö"
    )

    class Meta:
        verbose_name        = "‡πÄ‡∏°‡∏ô‡∏π"
        verbose_name_plural = "‡πÄ‡∏°‡∏ô‡∏π"

    def __str__(self):
        return self.title

    @property
    def sold_count(self):
        """
        ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ OrderItem model ‡∏ó‡∏µ‡πà‡∏°‡∏µ
        ForeignKey ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Menu ‡πÅ‡∏•‡∏∞ field ‡∏ä‡∏∑‡πà‡∏≠ 'quantity'
        """
        result = self.orderitem_set.aggregate(total=Sum('quantity'))['total']
        return result or 0
    sold_count.fget.short_description = "‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß"

    def is_available(self, now=None):
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏±‡πà‡∏á‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        """
        now = now or timezone.localtime().time()
        return self.start_time <= now <= self.end_time

    def __str__(self):
        return f"{self.title} ({self.restaurant.name})"
    


class Deal(models.Model):
    """ ‡∏î‡∏µ‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô """
    title            = models.CharField("‡∏ä‡∏∑‡πà‡∏≠‡∏î‡∏µ‡∏•", max_length=100)
    menus = models.ManyToManyField("Menu", verbose_name="‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", blank=True)
    image            = models.ImageField("‡∏£‡∏π‡∏õ‡∏î‡∏µ‡∏•", upload_to='deals/')
    original_price   = models.DecimalField("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö", max_digits=8, decimal_places=2)
    discounted_price = models.DecimalField("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏•‡∏î", max_digits=8, decimal_places=2)
    start_time       = models.TimeField("‡πÄ‡∏£‡∏¥‡πà‡∏° (HH:MM)", default=timezone.now)
    end_time         = models.TimeField("‡∏à‡∏ö (HH:MM)", default=timezone.now)
    is_active        = models.BooleanField("‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", default=True)

    class Meta:
        verbose_name        = "‡∏î‡∏µ‡∏• (‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô)"
        verbose_name_plural = "‡∏î‡∏µ‡∏• (‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô)"

    def __str__(self):
        return self.title
    
    def can_order_now(self):
        if not self.is_active:
            return False
        now = timezone.localtime().time()
        return self.start_time <= now <= self.end_time

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏• FavoriteDeal
class FavoriteDeal(models.Model):
    """ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏µ‡∏• """
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='favorite_deals')
    deal = models.ForeignKey(Deal, on_delete=models.CASCADE, related_name='favorited_by')
    created_at = models.DateTimeField("‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠", default=timezone.now)

    class Meta:
        unique_together = ('user', 'deal')  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏î‡∏µ‡∏•‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        verbose_name        = "‡∏î‡∏µ‡∏•‡πÇ‡∏õ‡∏£‡∏î"
        verbose_name_plural = "‡∏î‡∏µ‡∏•‡πÇ‡∏õ‡∏£‡∏î"

    def __str__(self):
        return f"{self.user.username} ‡∏ä‡∏∑‡πà‡∏ô‡∏ä‡∏≠‡∏ö {self.deal.title}"

from myapp.models import Menu  # üëà ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ import Menu

class FlashMenu(models.Model):
    """ ‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏≠‡∏á """
    title            = models.CharField("‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π", max_length=100)
    menu             = models.ForeignKey(Menu, on_delete=models.CASCADE, verbose_name="‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", null=True)  # ‚Üê ‡πÅ‡∏Å‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    image            = models.ImageField("‡∏£‡∏π‡∏õ‡πÄ‡∏°‡∏ô‡∏π", upload_to='flash_menus/')
    original_price   = models.DecimalField("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö", max_digits=8, decimal_places=2)
    discounted_price = models.DecimalField("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏•‡∏î",   max_digits=8, decimal_places=2)
    start_time       = models.TimeField("‡πÄ‡∏£‡∏¥‡πà‡∏° (HH:MM)")
    end_time         = models.TimeField("‡∏à‡∏ö (HH:MM)")
    is_active        = models.BooleanField("‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", default=True)

    class Meta:
        verbose_name        = "‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏≠‡∏á"
        verbose_name_plural = "‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏≠‡∏á"

    def __str__(self):
        return f"{self.title} ({self.menu.title if self.menu else ''})"


class CartItem(models.Model):
    """ ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ """
    user           = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name='cart_items'
    )
    menu           = models.ForeignKey(
        'Menu',
        on_delete=models.CASCADE
    )
    quantity       = models.PositiveIntegerField("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", default=1)
    price_at_time  = models.DecimalField(
        "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏•‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤",
        max_digits=8,
        decimal_places=2,
        default=Decimal('0.00')
    )

    class Meta:
        unique_together = ('user', 'menu')
        verbose_name        = "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤"
        verbose_name_plural = "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤"

    def __str__(self):
        return f"{self.menu.title} x{self.quantity}"


from django.db import models
from django.contrib.auth.models import User
from django.utils import timezone

class Order(models.Model):
    """ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ """
    user          = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='orders'
    )
    address       = models.ForeignKey(
        'Address',
        on_delete=models.SET_NULL,
        null=True,
        related_name='orders'
    )
    total_price   = models.DecimalField("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", max_digits=10, decimal_places=2)
    delivery_fee  = models.DecimalField("‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á", max_digits=6, decimal_places=2, default=0)
    grand_total   = models.DecimalField("‡∏¢‡∏≠‡∏î‡∏™‡∏∏‡∏ó‡∏ò‡∏¥", max_digits=10, decimal_places=2, default=0)
    placed_at     = models.DateTimeField("‡∏™‡∏±‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠", default=timezone.now)
    is_paid       = models.BooleanField("‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß", default=False)

    payment_method = models.CharField(
        "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
        max_length=20,
        choices=(
            ('visa', 'VISA'),
            ('promptpay', 'PromptPay'),
        ),
        default='visa',
    )
    # 1) ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏û‡∏™‡∏•‡∏¥‡∏õ (‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡πÉ‡∏ô media/payment_slips/)
    slip          = models.ImageField(
        "‡∏™‡∏•‡∏¥‡∏õ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
        upload_to='payment_slips/',
        blank=True,
        null=True
    )
    # 2) ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QR (PromptPay payload)
    qr_data       = models.TextField(
        "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QR PromptPay",
        blank=True,
        null=True,
        help_text="‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á QR code (PromptPay payload)"
    )

    wants_spoon   = models.BooleanField("‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡πâ‡∏≠‡∏ô‡∏™‡πâ‡∏≠‡∏°", default=False)
    wants_sauce   = models.BooleanField("‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏≠‡∏™‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∏‡∏á", default=False)

    class Meta:
        verbose_name        = "‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå"
        verbose_name_plural = "‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå"

    def __str__(self):
        return f"Order#{self.id} ‡∏Ç‡∏≠‡∏á {self.user.username}"


class OrderItem(models.Model):
    """ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡πà‡∏≠‡∏¢‡πÉ‡∏ô‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå """
    order         = models.ForeignKey(Order, on_delete=models.CASCADE, related_name='items')
    menu          = models.ForeignKey(Menu, on_delete=models.SET_NULL, null=True)
    quantity      = models.PositiveIntegerField("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", default=1)
    price_at_time = models.DecimalField("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢", max_digits=8, decimal_places=2)

    class Meta:
        verbose_name        = "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå"
        verbose_name_plural = "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå"

    def __str__(self):
        return f"{self.menu.title} x{self.quantity}"
    

from django.db import models
from django.utils import timezone
from django.contrib.auth import get_user_model

User = get_user_model()

class PostCategory(models.Model):
    name         = models.CharField(max_length=50, unique=True)
    slug         = models.SlugField(max_length=50, unique=True)
    display_name = models.CharField(max_length=100)

    class Meta:
        verbose_name        = "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÇ‡∏û‡∏™‡∏ï‡πå"
        verbose_name_plural = "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÇ‡∏û‡∏™‡∏ï‡πå"

    def __str__(self):
        return self.display_name

class Post(models.Model):
    author      = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='community_posts'
    )
    category    = models.ForeignKey(
        PostCategory,                  # ‚Üê use the new model here
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='posts',
        verbose_name='‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà'
    )
    title       = models.CharField('‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠', max_length=200)
    content     = models.TextField('‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤')
    image       = models.ImageField(
        '‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û', upload_to='community/', blank=True, null=True
    )
    link        = models.URLField('‡∏•‡∏¥‡∏á‡∏Å‡πå', blank=True, null=True)
    tags        = models.CharField('‡πÅ‡∏ó‡πá‡∏Å', max_length=200, blank=True)
    feeling     = models.CharField('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å', max_length=50, blank=True)
    created_at  = models.DateTimeField('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á', default=timezone.now)
    updated_at  = models.DateTimeField('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î', auto_now=True)
    likes       = models.PositiveIntegerField('‡∏¢‡∏≠‡∏î‡πÑ‡∏•‡∏Å‡πå', default=0)

    class Meta:
        ordering = ['-created_at']
        verbose_name = '‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ä‡∏∏‡∏°‡∏ä‡∏ô'
        verbose_name_plural = '‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ä‡∏∏‡∏°‡∏ä‡∏ô'

    def __str__(self):
        return self.title

